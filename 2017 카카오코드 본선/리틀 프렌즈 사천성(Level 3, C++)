#include <string>
#include <vector>
#include <set>
#include <queue>
#include <iostream>
#include <cstring>

using namespace std;

struct position { char c; int y, x; };
struct q { int y, x, direction; };

bool operator<(const position& a, const position& b) {
	return a.c < b.c;
}

string search(set<position> list, int m, int n, vector<string> board) {
	queue<q> queue;
	string answer = "";
	int visit[100][100][4], dy[] = { 0,1,0,-1 }, dx[] = { 1,0,-1,0 }, tx, ty, after, before;
	bool chk, bend, possible;

	do {
		before = (int)list.size();
		for (auto it = list.begin(); it != list.end(); it++) {
			while (!queue.empty()) queue.pop();	//큐 초기화
			memset(visit, 0x7f, sizeof(visit));	//큰 값으로 visit 배열 초기화

			//첫 번째 노드 (모든 방향을 큐에 삽입, 0:우/1:하/2:좌/3:상)
			for (int i = 0; i < 4; i++) {
				visit[it->y][it->x][i] = 0;	//방향 회전 횟수: 0
				queue.push(q{ it->y, it->x, i });
			}

			chk = 0;	//같은 타일을 만났는지 확인하는 변수

			//큐에 값이 남아있고(방문하지 않은 노드 존재) 같은 타일을 만나지 않았을 때까지 반복
			while (!queue.empty() && !chk) {
				q now = queue.front();
				queue.pop();
				for (int i = 0; i < 4; i++) {
					tx = now.x + dx[i];
					ty = now.y + dy[i];
					bend = (i != now.direction);	//1: 방향이 꺾임/0: 꺾이지 않음

					//보드에서 벗어났는지 확인
					if (0 <= ty && ty < m && 0 <= tx && tx < n) {
						possible = board[ty][tx] != '*' && (board[ty][tx] == '.' || board[ty][tx] == it->c);	//막히지 않고, 빈칸이거나 같은 타일일 경우

						//보드 안에서 접근이 가능하고 두번 이상 꺾이지 않았고 방문하지 않은 노드(방문했을 시 visit direction이 작은 수로 바뀜)
						if (possible && (visit[now.y][now.x][now.direction] + bend < 2) && visit[ty][tx][i] > visit[now.y][now.x][now.direction] + bend) {
							visit[ty][tx][i] = visit[now.y][now.x][now.direction] + bend;	//방향 꺾은 횟수
							queue.push(q{ ty, tx, i });	//방문하지 않았다면 큐에 추가
							//같은 모양의 타일에 접근이 가능할 경우 각 타일을 빈칸으로 바꿈
							if (board[ty][tx] == it->c) {
								chk = 1;
								board[it->y][it->x] = '.';
								board[ty][tx] = '.';
							}
						}
					}
				}
			}
			//같은 타일을 찾은 경우 리스트에서 제거하고 다음 알파벳으로 이동
			if (chk) {
				answer += it->c;
				list.erase(it);
				break;
			}
		}

		after = list.size();

	} while (before != after);	//리스트가 줄어들지 않는 경우(불가능한 경우 + 전부 제거한 경우)

		//리스트가 비어있지 않다면 불가능한 경우
		if (!list.empty()) answer = "IMPOSSIBLE";
		return answer;
}

string solution(int m, int n, vector<string> board) {
	int i, j;
	set<position> tileList;


	//제거할 알파벳 타일 오름차순으로 list에 정렬
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			if (board[i][j] >= 'A' && board[i][j] <= 'Z')
				tileList.insert(position{ board[i][j], i, j });
		}
	}

	return search(tileList, m, n, board);
}

//https://yupttuk.tistory.com/354
